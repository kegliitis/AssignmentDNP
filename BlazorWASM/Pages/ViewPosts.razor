@page "/ViewPosts"
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IPostService _postService
@inject NavigationManager navMgr;
<h3>Posts</h3>
<div class="filter-bar">
    <div class="filters-container">
        <img src="icons/@(doShowFilters ? "clear_" : "")funnel.png" class="funnel" @onclick="@(() => doShowFilters = !doShowFilters)" alt="Funnel"/>
        @if (doShowFilters)
        {
            <div class="filter">
                <label>Username:</label>
                <input type="text" @bind="usernameFilter"/>
            </div>
            <div class="filter">
                <label>Title:</label>
                <input type="text" @bind="titleFilter"/>
            </div>
            <div class="filter">
                <label>Body:</label>
                <input type="text" @bind="bodyFilter"/>
            </div>
        }
    </div>
</div>

<div>
    <button @onclick="LoadTodos">Load</button>
</div>

@if (posts == null)
{
}
else if (!posts.Any())
{
    <p>No posts to display</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Creator</th>
            <th>Edit</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in posts)
        {
            <tr>
                <td>@item.Title</td>
                <td>@item.Creator.Username</td>
                <td>
                    <img src="icons/edit.gif" class="funnel" @onclick="@(() => navMgr.NavigateTo($"/EditTodo/{item.Id}"))"/>
                </td>
                <td>
                    <label @onclick="@(() => RemovePost(item.Id))" style="cursor:pointer; color: red; font-weight: bold">
                        &#x2717;
                    </label>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
@if (!string.IsNullOrEmpty(msg))
{
    <label style="color: red">@msg</label>
}

@code {
    private IEnumerable<Post>? posts;
    private string msg = "";
    private bool doShowFilters = false;

    private string? usernameFilter;
    private string? titleFilter;
    private string? bodyFilter;

    private async Task LoadTodos()
    {
        try
        {
            posts = await _postService.GetAsync(usernameFilter, titleFilter, bodyFilter);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private async Task RemovePost(int postId)
    {
        msg = "";
        try
        {
            await _postService.DeleteAsync(postId);

            var list = new List<Post>(posts!);
            list.RemoveAll(post => post.Id == postId);
            posts = list.AsEnumerable();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}