@page "/CreatePost"
@attribute [Authorize]
@using Domain.DTOs
@using Domain.Models
@using HttpClients.ClientInterfaces
@inject IUserService _userService
@inject IPostService _postService
@inject NavigationManager navMgr
@using UIComponents
@using System.Security.Claims

@if (isLoggedIn)
{
    <div class="card-post">
        <h3>Create Post, @username </h3>
        <div class="form-group field">
            <label>Title:</label>
            <input type="text" @bind="postTitle"/>
        </div>
        <div class="form-group field">
            <label>Body</label>
            <textarea class="form-body" type="text" @bind="postBody"/>
        </div>
        <div class="button-row">
            @if (!string.IsNullOrEmpty(msg))
            {
                <label style="color: red">@msg</label>
            }
            <button @onclick="CreateAsync" class="acceptbtn">Create</button>
        </div>
        <Modal ShowModal="showModal">
            <p>You have successfully created a new post!</p>
            <button @onclick="@Proceed">Wonderful</button>
        </Modal>
    </div>
}
else
{
    <p>You are not logged in!</p>
}

@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private string username = "";
    private string postTitle = "";
    private string postBody = "";
    private string msg = "";
    private int creatorId;

    private bool showModal;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn)
            return;
       
        userClaims = user.Claims;
      
        username = user.Identity!.Name!;
        creatorId = Int32.Parse(user.Claims.FirstOrDefault(c => c.Type.Equals("Id"))!.Value);


    }

    private async Task CreateAsync()
    {
        msg = "";
        if (string.IsNullOrEmpty(postTitle))
        {
            msg = "Title cannot be empty!";
            return;
        }
    
        if (string.IsNullOrEmpty(postBody))
        {
            msg = "Body cannot be empty!";
            return;
        }
    
        try
        {
            PostCreationDTO dto = new PostCreationDTO(creatorId, postTitle, postBody);
            await _postService.CreateAsync(dto);
            showModal = true;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/");
    }

}